FUNCTION_BLOCK fuzzyCarDriver

VAR_INPUT
hole_position : REAL;
x_car_velocity : REAL;
car_position : REAL;
END_VAR

VAR_OUTPUT
velocity_change : REAL;
END_VAR

FUZZIFY car_position
TERM near_left_edge := (0, 1) (40, 1) (60, 0);
TERM safe := (40, 0) (60, 1) (240, 1) (260, 0);
TERM near_right_edge := (240, 0) (260, 1) (300, 1);
END_FUZZIFY

FUZZIFY hole_position
TERM near_left_edge := (0, 1) (110, 1) (110, 0);
TERM safe := (110, 0) (110, 1) (190, 1) (190, 0);
TERM near_right_edge := (190, 0) (190, 1) (300, 1);
END_FUZZIFY

FUZZIFY hole_relative_position
TERM near_left := (-80, 0) (-30, 1) (0, 1) (0, 0);
TERM near_right := (0, 0) (0, 1) (30, 1) (80, 0);
TERM far := (-300, 1) (-80, 1) (-30, 0) (30, 0) (80, 1) (300, 1);
END_FUZZIFY

FUZZIFY x_car_velocity
TERM left := (-20, 1) (-8, 1) (0, 0);
TERM stable := (-8, 0) (0, 1) (8, 0);
TERM right := (0, 0) (8, 1) (20, 1);
END_FUZZIFY

DEFUZZIFY velocity_change
TERM left :=  (-0.3, 1) (0, 0);
TERM stable := (-0.3, 0) (0, 1) (0.3, 0);
TERM right := (0, 0) (0.3, 1);
METHOD : COG;
DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK first
AND: MIN;
OR: MAX;
ACT: MIN;

RULE 0: IF car_position IS near_left_edge THEN velocity_change IS right;
RULE 1: IF car_position IS near_right_edge THEN velocity_change IS left;

RULE 2: IF hole_relative_position IS near_left AND hole_position IS safe THEN velocity_change IS right;
RULE 3: IF hole_relative_position IS near_right AND hole_position IS safe THEN velocity_change IS left;

RULE 4: IF hole_relative_position IS NOT far AND hole_position IS near_left_edge THEN velocity_change IS right;
RULE 5: IF hole_relative_position IS NOT far AND hole_position IS near_right_edge THEN velocity_change IS left;

RULE 6: IF hole_relative_position IS far AND car_position is safe AND x_car_velocity IS left THEN velocity_change IS right;
RULE 7: IF hole_relative_position IS far AND car_position is safe AND x_car_velocity IS right THEN velocity_change IS left;


END_RULEBLOCK

END_FUNCTION_BLOCK